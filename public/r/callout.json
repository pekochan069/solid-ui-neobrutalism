{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "callout",
  "type": "registry:ui",
  "files": [
    {
      "path": "src/registry/items/ui/callout.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\nimport type { Component, ComponentProps, JSX } from \"solid-js\";\n\nimport { Show, splitProps } from \"solid-js\";\nimport { cva } from \"class-variance-authority\";\nimport CircleCheckIcon from \"lucide-solid/icons/circle-check\";\nimport CircleXIcon from \"lucide-solid/icons/circle-x\";\nimport InfoIcon from \"lucide-solid/icons/info\";\nimport TriangleAlertIcon from \"lucide-solid/icons/triangle-alert\";\n\nimport { cn } from \"~/lib/utils\";\n\nconst calloutVariants = cva(\"rounded-base border-2 px-4 py-3\", {\n  variants: {\n    variant: {\n      default: \"border-primary bg-background text-primary\",\n      success: \"border-success-foreground bg-success text-success-foreground\",\n      info: \"border-info-foreground bg-info text-info-foreground\",\n      warning: \"border-warning-foreground bg-warning text-warning-foreground\",\n      error: \"border-error-foreground bg-error text-error-foreground\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\ntype CalloutProps = ComponentProps<\"div\"> &\n  VariantProps<typeof calloutVariants>;\n\ntype CalloutVariant = NonNullable<\n  VariantProps<typeof calloutVariants>[\"variant\"]\n>;\n\ntype IconMap = Exclude<CalloutVariant, \"default\">;\n\nconst iconMap: {\n  [key in IconMap]: (props: { class?: string }) => JSX.Element;\n} = {\n  success: (props) => <CircleCheckIcon class={props.class} />,\n  info: (props) => <InfoIcon class={props.class} />,\n  warning: (props) => <TriangleAlertIcon class={props.class} />,\n  error: (props) => <CircleXIcon class={props.class} />,\n};\n\nconst Callout: Component<CalloutProps> = (props) => {\n  const [local, others] = splitProps(props, [\"class\", \"variant\"]);\n\n  return (\n    <div\n      data-slot=\"callout\"\n      data-variant={local.variant}\n      class={cn(calloutVariants({ variant: local.variant }), local.class)}\n      {...others}\n    />\n  );\n};\n\nconst CalloutTitle: Component<\n  ComponentProps<\"h3\"> & {\n    icon?: JSX.Element | (() => JSX.Element);\n  }\n> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"]);\n  return (\n    <div class=\"flex items-center gap-2\">\n      <Show when={props.icon}>\n        {typeof props.icon === \"function\" ? <props.icon /> : props.icon}\n      </Show>\n      <h3\n        data-slot=\"callout-title\"\n        class={cn(\"font-semibold\", local.class)}\n        {...others}\n      />\n    </div>\n  );\n};\n\nconst CalloutContent: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"]);\n  return (\n    <div\n      data-slot=\"callout-content\"\n      class={cn(\"mt-2\", local.class)}\n      {...others}\n    />\n  );\n};\n\nexport { Callout, CalloutTitle, CalloutContent, iconMap as calloutIconMap };\n",
      "type": "registry:ui",
      "target": "ui/callout.tsx"
    }
  ]
}
