{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "callout",
  "type": "registry:ui",
  "files": [
    {
      "path": "src/registry/items/ui/callout.tsx",
      "content": "import type { VariantProps } from \"class-variance-authority\";\r\nimport type { Component, ComponentProps, JSX } from \"solid-js\";\r\n\r\nimport { Show, splitProps } from \"solid-js\";\r\nimport { cva } from \"class-variance-authority\";\r\nimport {\r\n  CircleCheckIcon,\r\n  CircleXIcon,\r\n  InfoIcon,\r\n  TriangleAlertIcon,\r\n} from \"lucide-solid\";\r\n\r\nimport { cn } from \"~/lib/utils\";\r\n\r\nconst calloutVariants = cva(\"rounded-base border-2 px-4 py-3\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"border-primary bg-background text-primary\",\r\n      success: \"border-success-foreground bg-success text-success-foreground\",\r\n      info: \"border-info-foreground bg-info text-info-foreground\",\r\n      warning: \"border-warning-foreground bg-warning text-warning-foreground\",\r\n      error: \"border-error-foreground bg-error text-error-foreground\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n  },\r\n});\r\n\r\ntype CalloutProps = ComponentProps<\"div\"> &\r\n  VariantProps<typeof calloutVariants>;\r\n\r\ntype CalloutVariant = NonNullable<\r\n  VariantProps<typeof calloutVariants>[\"variant\"]\r\n>;\r\n\r\ntype IconMap = Exclude<CalloutVariant, \"default\">;\r\n\r\nconst iconMap: {\r\n  [key in IconMap]: (props: { class?: string }) => JSX.Element;\r\n} = {\r\n  success: (props) => <CircleCheckIcon class={props.class} />,\r\n  info: (props) => <InfoIcon class={props.class} />,\r\n  warning: (props) => <TriangleAlertIcon class={props.class} />,\r\n  error: (props) => <CircleXIcon class={props.class} />,\r\n};\r\n\r\nconst Callout: Component<CalloutProps> = (props) => {\r\n  const [local, others] = splitProps(props, [\"class\", \"variant\"]);\r\n\r\n  return (\r\n    <div\r\n      data-slot=\"callout\"\r\n      data-variant={local.variant}\r\n      class={cn(calloutVariants({ variant: local.variant }), local.class)}\r\n      {...others}\r\n    />\r\n  );\r\n};\r\n\r\nconst CalloutTitle: Component<\r\n  ComponentProps<\"h3\"> & {\r\n    icon?: JSX.Element | (() => JSX.Element);\r\n  }\r\n> = (props) => {\r\n  const [local, others] = splitProps(props, [\"class\"]);\r\n  return (\r\n    <div class=\"flex items-center gap-2\">\r\n      <Show when={props.icon}>\r\n        {typeof props.icon === \"function\" ? <props.icon /> : props.icon}\r\n      </Show>\r\n      <h3\r\n        data-slot=\"callout-title\"\r\n        class={cn(\"font-semibold\", local.class)}\r\n        {...others}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CalloutContent: Component<ComponentProps<\"div\">> = (props) => {\r\n  const [local, others] = splitProps(props, [\"class\"]);\r\n  return (\r\n    <div\r\n      data-slot=\"callout-content\"\r\n      class={cn(\"mt-2\", local.class)}\r\n      {...others}\r\n    />\r\n  );\r\n};\r\n\r\nexport { Callout, CalloutTitle, CalloutContent, iconMap as calloutIconMap };\r\n",
      "type": "registry:ui"
    }
  ]
}
