{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": ["@corvu/calendar"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "src/registry/items/ui/calendar.tsx",
      "content": "import type {\n  CellProps,\n  CellTriggerProps,\n  DynamicProps,\n  HeadCellProps,\n  LabelProps,\n  NavProps,\n  RootMultipleProps,\n  RootProps,\n  RootRangeProps,\n  RootSingleProps,\n  TableProps,\n} from \"@corvu/calendar\";\nimport type { ValidComponent } from \"solid-js\";\n\nimport {\n  createMemo,\n  Index,\n  Match,\n  mergeProps,\n  Show,\n  splitProps,\n  Switch,\n} from \"solid-js\";\nimport CalendarPrimitive from \"@corvu/calendar\";\nimport ChevronLeftIcon from \"lucide-solid/icons/chevron-left\";\nimport ChevronRightIcon from \"lucide-solid/icons/chevron-right\";\n\nimport { Button } from \"./button\";\n\nconst CalendarRoot = (props: RootProps) => {\n  return <CalendarPrimitive data-slot=\"calendar\" {...props} />;\n};\n\ntype CalendarNavProps<T extends ValidComponent = \"button\"> = DynamicProps<\n  T,\n  NavProps<T>\n>;\n\nconst CalendarNav = <T extends ValidComponent = \"button\">(\n  props: CalendarNavProps<T>,\n) => {\n  return <CalendarPrimitive.Nav data-slot=\"calendar-nav\" {...props} />;\n};\n\nconst CalendarLabel = <T extends ValidComponent = \"h2\">(\n  props: DynamicProps<T, LabelProps<T>>,\n) => {\n  return <CalendarPrimitive.Label data-slot=\"calendar-label\" {...props} />;\n};\n\nconst CalendarCell = <T extends ValidComponent = \"td\">(\n  props: DynamicProps<T, CellProps<T>>,\n) => {\n  return <CalendarPrimitive.Cell data-slot=\"calendar-cell\" {...props} />;\n};\n\nconst CalendarCellTrigger = <T extends ValidComponent = \"button\">(\n  props: DynamicProps<T, CellTriggerProps<T>>,\n) => {\n  return (\n    <CalendarPrimitive.CellTrigger\n      data-slot=\"calendar-cell-trigger\"\n      {...props}\n    />\n  );\n};\n\nconst CalendarHeadCell = <T extends ValidComponent = \"th\">(\n  props: DynamicProps<T, HeadCellProps<T>>,\n) => {\n  return (\n    <CalendarPrimitive.HeadCell data-slot=\"calendar-head-cell\" {...props} />\n  );\n};\n\nconst CalendarTable = <T extends ValidComponent = \"table\">(\n  props: DynamicProps<T, TableProps<T>>,\n) => {\n  return <CalendarPrimitive.Table data-slot=\"calendar-table\" {...props} />;\n};\n\ninterface SingleCalendarProps extends Omit<RootSingleProps, \"children\"> {\n  locales: Intl.LocalesArgument;\n}\n\nconst SingleCalendar = (props: SingleCalendarProps) => {\n  const [local, rest] = splitProps(props, [\"mode\", \"locales\"]);\n  const formatWeekdayLong = createMemo(\n    () =>\n      new Intl.DateTimeFormat(local.locales, {\n        weekday: \"long\",\n      }),\n  );\n  const formatWeekdayShort = createMemo(\n    () =>\n      new Intl.DateTimeFormat(local.locales, {\n        weekday: \"short\",\n      }),\n  );\n  const formatMonth = createMemo(\n    () =>\n      new Intl.DateTimeFormat(local.locales, {\n        year: \"numeric\",\n        month: \"long\",\n      }),\n  );\n  return (\n    <CalendarRoot mode=\"single\" {...rest}>\n      {(calendarProps) => (\n        <div class=\"my-4 rounded-base border-2 border-border p-3\">\n          <div class=\"flex items-center justify-between\">\n            <CalendarNav\n              as={Button}\n              action=\"prev-month\"\n              aria-label=\"Go to previous month\"\n              variant=\"neutral-no-shadow\"\n              size=\"icon\"\n              class=\"size-7\"\n            >\n              <ChevronLeftIcon class=\"size-5\" />\n            </CalendarNav>\n            <CalendarLabel class=\"text-sm\">\n              {formatMonth().format(calendarProps.month)}\n            </CalendarLabel>\n            <CalendarNav\n              as={Button}\n              action=\"next-month\"\n              aria-label=\"Go to next month\"\n              variant=\"neutral-no-shadow\"\n              size=\"icon\"\n              class=\"size-7\"\n            >\n              <ChevronRightIcon class=\"size-5\" />\n            </CalendarNav>\n          </div>\n          <CalendarTable class=\"mt-3\">\n            <thead>\n              <tr>\n                <Index each={calendarProps.weekdays}>\n                  {(weekday) => (\n                    <CalendarHeadCell\n                      abbr={formatWeekdayLong().format(weekday())}\n                      class=\"w-8 pb-1 text-xs font-normal opacity-65\"\n                    >\n                      {formatWeekdayShort().format(weekday())}\n                    </CalendarHeadCell>\n                  )}\n                </Index>\n              </tr>\n            </thead>\n            <tbody>\n              <Index each={calendarProps.weeks}>\n                {(week) => (\n                  <tr>\n                    <Index each={week()}>\n                      {(day) => (\n                        <CalendarCell class=\"p-0\">\n                          <CalendarCellTrigger\n                            day={day()}\n                            class=\"size-8 rounded-base text-sm transition-colors duration-100 focus-visible:bg-primary/80 disabled:pointer-events-none disabled:opacity-40 data-selected:border-2 data-selected:border-border data-selected:bg-primary! data-selected:text-primary-foreground! data-today:bg-primary/50 md:hover:bg-primary/80\"\n                          >\n                            {day().getDate()}\n                          </CalendarCellTrigger>\n                        </CalendarCell>\n                      )}\n                    </Index>\n                  </tr>\n                )}\n              </Index>\n            </tbody>\n          </CalendarTable>\n        </div>\n      )}\n    </CalendarRoot>\n  );\n};\n\ninterface MultipleCalendarProps extends Omit<RootMultipleProps, \"children\"> {\n  locales: Intl.LocalesArgument;\n  numberOfMonths: number;\n}\n\nconst MultipleCalendar = (props: MultipleCalendarProps) => {\n  const [local, rest] = splitProps(props, [\"mode\", \"locales\"]);\n  const formatWeekdayLong = createMemo(\n    () =>\n      new Intl.DateTimeFormat(local.locales, {\n        weekday: \"long\",\n      }),\n  );\n  const formatWeekdayShort = createMemo(\n    () =>\n      new Intl.DateTimeFormat(local.locales, {\n        weekday: \"short\",\n      }),\n  );\n  const formatMonth = createMemo(\n    () =>\n      new Intl.DateTimeFormat(local.locales, {\n        year: \"numeric\",\n        month: \"long\",\n      }),\n  );\n  return (\n    <CalendarRoot mode=\"multiple\" {...rest}>\n      {(calendarProps) => (\n        <div class=\"my-4 rounded-base border-2 border-border p-3\">\n          <div class=\"flex items-center justify-between\">\n            <CalendarNav\n              as={Button}\n              action=\"prev-month\"\n              aria-label=\"Go to previous month\"\n              variant=\"neutral-no-shadow\"\n              size=\"icon\"\n              class=\"size-7\"\n            >\n              <ChevronLeftIcon class=\"size-5\" />\n            </CalendarNav>\n            <CalendarLabel class=\"text-sm\">\n              {formatMonth().format(calendarProps.month)}\n            </CalendarLabel>\n            <CalendarNav\n              as={Button}\n              action=\"next-month\"\n              aria-label=\"Go to next month\"\n              variant=\"neutral-no-shadow\"\n              size=\"icon\"\n              class=\"size-7\"\n            >\n              <ChevronRightIcon class=\"size-5\" />\n            </CalendarNav>\n          </div>\n          <CalendarTable class=\"mt-3\">\n            <thead>\n              <tr>\n                <Index each={calendarProps.weekdays}>\n                  {(weekday) => (\n                    <CalendarHeadCell\n                      abbr={formatWeekdayLong().format(weekday())}\n                      class=\"w-8 pb-1 text-xs font-normal opacity-65\"\n                    >\n                      {formatWeekdayShort().format(weekday())}\n                    </CalendarHeadCell>\n                  )}\n                </Index>\n              </tr>\n            </thead>\n            <tbody>\n              <Index each={calendarProps.weeks}>\n                {(week) => (\n                  <tr>\n                    <Index each={week()}>\n                      {(day) => (\n                        <CalendarCell class=\"p-0\">\n                          <CalendarCellTrigger\n                            day={day()}\n                            class=\"size-8 rounded-base text-sm transition-colors duration-100 focus-visible:bg-primary/80 disabled:pointer-events-none disabled:opacity-40 data-selected:border-2 data-selected:border-border data-selected:bg-primary! data-selected:text-primary-foreground! data-today:bg-primary/50 md:hover:bg-primary/80\"\n                          >\n                            {day().getDate()}\n                          </CalendarCellTrigger>\n                        </CalendarCell>\n                      )}\n                    </Index>\n                  </tr>\n                )}\n              </Index>\n            </tbody>\n          </CalendarTable>\n        </div>\n      )}\n    </CalendarRoot>\n  );\n};\n\ninterface RangeCalendarProps\n  extends Omit<RootRangeProps, \"children\" | \"numberOfMonths\"> {\n  locales: Intl.LocalesArgument;\n  numberOfMonths: number;\n}\n\nconst RangeCalendar = (props: RangeCalendarProps) => {\n  const [local, rest] = splitProps(props, [\n    \"mode\",\n    \"locales\",\n    \"numberOfMonths\",\n  ]);\n  const formatWeekdayLong = createMemo(\n    () =>\n      new Intl.DateTimeFormat(props.locales, {\n        weekday: \"long\",\n      }),\n  );\n  const formatWeekdayShort = createMemo(\n    () =>\n      new Intl.DateTimeFormat(props.locales, {\n        weekday: \"short\",\n      }),\n  );\n  const formatMonth = createMemo(\n    () =>\n      new Intl.DateTimeFormat(props.locales, {\n        year: \"numeric\",\n        month: \"long\",\n      }),\n  );\n  return (\n    <CalendarRoot mode=\"range\" numberOfMonths={local.numberOfMonths} {...rest}>\n      {(calendarProps) => (\n        <div class=\"relative my-4 rounded-base border-2 border-border p-3\">\n          <div class=\"space-y-4 md:flex md:space-y-0 md:space-x-4\">\n            <Index each={calendarProps.months}>\n              {(month, index) => (\n                <div>\n                  <div class=\"flex h-7 items-center justify-between\">\n                    <Show when={index === 0} fallback={<div class=\"w-7\" />}>\n                      <CalendarNav\n                        as={Button}\n                        action=\"prev-month\"\n                        aria-label=\"Go to previous month\"\n                        variant=\"neutral-no-shadow\"\n                        size=\"icon\"\n                        class=\"size-7\"\n                      >\n                        <ChevronLeftIcon class=\"size-5\" />\n                      </CalendarNav>\n                    </Show>\n                    <CalendarLabel index={index} class=\"text-sm\">\n                      {formatMonth().format(month().month)}\n                    </CalendarLabel>\n                    <Show\n                      when={index === local.numberOfMonths - 1}\n                      fallback={<div class=\"w-7\" />}\n                    >\n                      <CalendarNav\n                        as={Button}\n                        action=\"next-month\"\n                        aria-label=\"Go to next month\"\n                        variant=\"neutral-no-shadow\"\n                        size=\"icon\"\n                        class=\"size-7\"\n                      >\n                        <ChevronRightIcon class=\"size-5\" />\n                      </CalendarNav>\n                    </Show>\n                  </div>\n                  <CalendarTable index={index} class=\"mt-3\">\n                    <thead>\n                      <tr>\n                        <Index each={calendarProps.weekdays}>\n                          {(weekday) => (\n                            <CalendarHeadCell\n                              abbr={formatWeekdayLong().format(weekday())}\n                              class=\"w-8 flex-1 pb-1 text-xs font-normal opacity-65\"\n                            >\n                              {formatWeekdayShort().format(weekday())}\n                            </CalendarHeadCell>\n                          )}\n                        </Index>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <Index each={month().weeks}>\n                        {(week) => (\n                          <tr>\n                            <Index each={week()}>\n                              {(day) => (\n                                <CalendarCell class=\"p-0 has-data-in-range:bg-primary/40 has-data-in-range:first:rounded-l-base has-data-in-range:last:rounded-r-base has-data-range-end:rounded-r-base has-data-range-start:rounded-l-base has-[[disabled]]:opacity-40\">\n                                  <CalendarCellTrigger\n                                    day={day()}\n                                    month={month().month}\n                                    class=\"inline-flex size-8 items-center justify-center rounded-base text-sm focus-visible:bg-primary/80 disabled:pointer-events-none data-range-end:border-2 data-range-end:border-border data-range-end:bg-primary data-range-start:border-2 data-range-start:border-border data-range-start:bg-primary data-today:bg-primary/50 md:hover:not-data-range-start:not-data-range-end:bg-primary/80\"\n                                  >\n                                    {day().getDate()}\n                                  </CalendarCellTrigger>\n                                </CalendarCell>\n                              )}\n                            </Index>\n                          </tr>\n                        )}\n                      </Index>\n                    </tbody>\n                  </CalendarTable>\n                </div>\n              )}\n            </Index>\n          </div>\n        </div>\n      )}\n    </CalendarRoot>\n  );\n};\n\ninterface CalendarSingleProps\n  extends Omit<RootSingleProps, \"children\" | \"mode\"> {\n  locales?: Intl.LocalesArgument;\n  mode: \"single\";\n}\n\ninterface CalendarMultipleProps\n  extends Omit<RootMultipleProps, \"children\" | \"mode\"> {\n  locales?: Intl.LocalesArgument;\n  mode?: \"multiple\";\n}\n\ninterface CalendarRangeProps extends Omit<RootRangeProps, \"children\" | \"mode\"> {\n  locales?: Intl.LocalesArgument;\n  mode: \"range\";\n}\n\ntype CalendarProps =\n  | CalendarSingleProps\n  | CalendarMultipleProps\n  | CalendarRangeProps;\n\nconst Calendar = (props: CalendarProps) => {\n  const merged = mergeProps(\n    {\n      locales: \"en\" as Intl.LocalesArgument,\n      numberOfMonths: 2,\n    },\n    props,\n  );\n\n  return (\n    <Switch>\n      <Match when={merged.mode === \"single\" || merged.mode === undefined}>\n        <SingleCalendar {...(merged as SingleCalendarProps)} />\n      </Match>\n      <Match when={merged.mode === \"multiple\"}>\n        <MultipleCalendar {...(merged as MultipleCalendarProps)} />\n      </Match>\n      <Match when={merged.mode === \"range\"}>\n        <RangeCalendar {...(merged as RangeCalendarProps)} />\n      </Match>\n    </Switch>\n  );\n};\n\nexport {\n  Calendar,\n  type CalendarProps,\n  SingleCalendar,\n  type SingleCalendarProps,\n  MultipleCalendar,\n  type MultipleCalendarProps,\n  RangeCalendar,\n  type RangeCalendarProps,\n  CalendarRoot,\n  CalendarNav,\n  CalendarLabel,\n  CalendarCell,\n  CalendarCellTrigger,\n  CalendarHeadCell,\n  CalendarTable,\n};\n",
      "type": "registry:ui"
    }
  ]
}
