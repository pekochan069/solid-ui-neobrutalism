{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "calendar",
  "type": "registry:ui",
  "dependencies": ["@corvu/calendar"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "src/registry/items/ui/calendar.tsx",
      "content": "import type {\r\n  CellProps,\r\n  CellTriggerProps,\r\n  DynamicProps,\r\n  HeadCellProps,\r\n  LabelProps,\r\n  NavProps,\r\n  RootMultipleProps,\r\n  RootProps,\r\n  RootRangeProps,\r\n  RootSingleProps,\r\n  TableProps,\r\n} from \"@corvu/calendar\";\r\nimport type { ValidComponent } from \"solid-js\";\r\n\r\nimport {\r\n  createMemo,\r\n  Index,\r\n  Match,\r\n  mergeProps,\r\n  Show,\r\n  splitProps,\r\n  Switch,\r\n} from \"solid-js\";\r\nimport CalendarPrimitive from \"@corvu/calendar\";\r\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-solid\";\r\n\r\nimport { Button } from \"./button\";\r\n\r\nconst CalendarRoot = (props: RootProps) => {\r\n  return <CalendarPrimitive data-slot=\"calendar\" {...props} />;\r\n};\r\n\r\ntype CalendarNavProps<T extends ValidComponent = \"button\"> = DynamicProps<\r\n  T,\r\n  NavProps<T>\r\n>;\r\n\r\nconst CalendarNav = <T extends ValidComponent = \"button\">(\r\n  props: CalendarNavProps<T>,\r\n) => {\r\n  return <CalendarPrimitive.Nav data-slot=\"calendar-nav\" {...props} />;\r\n};\r\n\r\nconst CalendarLabel = <T extends ValidComponent = \"h2\">(\r\n  props: DynamicProps<T, LabelProps<T>>,\r\n) => {\r\n  return <CalendarPrimitive.Label data-slot=\"calendar-label\" {...props} />;\r\n};\r\n\r\nconst CalendarCell = <T extends ValidComponent = \"td\">(\r\n  props: DynamicProps<T, CellProps<T>>,\r\n) => {\r\n  return <CalendarPrimitive.Cell data-slot=\"calendar-cell\" {...props} />;\r\n};\r\n\r\nconst CalendarCellTrigger = <T extends ValidComponent = \"button\">(\r\n  props: DynamicProps<T, CellTriggerProps<T>>,\r\n) => {\r\n  return (\r\n    <CalendarPrimitive.CellTrigger\r\n      data-slot=\"calendar-cell-trigger\"\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nconst CalendarHeadCell = <T extends ValidComponent = \"th\">(\r\n  props: DynamicProps<T, HeadCellProps<T>>,\r\n) => {\r\n  return (\r\n    <CalendarPrimitive.HeadCell data-slot=\"calendar-head-cell\" {...props} />\r\n  );\r\n};\r\n\r\nconst CalendarTable = <T extends ValidComponent = \"table\">(\r\n  props: DynamicProps<T, TableProps<T>>,\r\n) => {\r\n  return <CalendarPrimitive.Table data-slot=\"calendar-table\" {...props} />;\r\n};\r\n\r\ninterface SingleCalendarProps extends Omit<RootSingleProps, \"children\"> {\r\n  locales: Intl.LocalesArgument;\r\n}\r\n\r\nconst SingleCalendar = (props: SingleCalendarProps) => {\r\n  const [local, rest] = splitProps(props, [\"mode\", \"locales\"]);\r\n  const formatWeekdayLong = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(local.locales, {\r\n        weekday: \"long\",\r\n      }),\r\n  );\r\n  const formatWeekdayShort = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(local.locales, {\r\n        weekday: \"short\",\r\n      }),\r\n  );\r\n  const formatMonth = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(local.locales, {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n      }),\r\n  );\r\n  return (\r\n    <CalendarRoot mode=\"single\" {...rest}>\r\n      {(calendarProps) => (\r\n        <div class=\"my-4 rounded-base border-2 border-border p-3\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <CalendarNav\r\n              as={Button}\r\n              action=\"prev-month\"\r\n              aria-label=\"Go to previous month\"\r\n              variant=\"neutral-no-shadow\"\r\n              size=\"icon\"\r\n              class=\"size-7\"\r\n            >\r\n              <ChevronLeftIcon class=\"size-5\" />\r\n            </CalendarNav>\r\n            <CalendarLabel class=\"text-sm\">\r\n              {formatMonth().format(calendarProps.month)}\r\n            </CalendarLabel>\r\n            <CalendarNav\r\n              as={Button}\r\n              action=\"next-month\"\r\n              aria-label=\"Go to next month\"\r\n              variant=\"neutral-no-shadow\"\r\n              size=\"icon\"\r\n              class=\"size-7\"\r\n            >\r\n              <ChevronRightIcon class=\"size-5\" />\r\n            </CalendarNav>\r\n          </div>\r\n          <CalendarTable class=\"mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <Index each={calendarProps.weekdays}>\r\n                  {(weekday) => (\r\n                    <CalendarHeadCell\r\n                      abbr={formatWeekdayLong().format(weekday())}\r\n                      class=\"w-8 pb-1 text-xs font-normal opacity-65\"\r\n                    >\r\n                      {formatWeekdayShort().format(weekday())}\r\n                    </CalendarHeadCell>\r\n                  )}\r\n                </Index>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <Index each={calendarProps.weeks}>\r\n                {(week) => (\r\n                  <tr>\r\n                    <Index each={week()}>\r\n                      {(day) => (\r\n                        <CalendarCell class=\"p-0\">\r\n                          <CalendarCellTrigger\r\n                            day={day()}\r\n                            class=\"size-8 rounded-base text-sm transition-colors duration-100 focus-visible:bg-primary/80 disabled:pointer-events-none disabled:opacity-40 data-selected:border-2 data-selected:border-border data-selected:bg-primary! data-selected:text-primary-foreground! data-today:bg-primary/50 md:hover:bg-primary/80\"\r\n                          >\r\n                            {day().getDate()}\r\n                          </CalendarCellTrigger>\r\n                        </CalendarCell>\r\n                      )}\r\n                    </Index>\r\n                  </tr>\r\n                )}\r\n              </Index>\r\n            </tbody>\r\n          </CalendarTable>\r\n        </div>\r\n      )}\r\n    </CalendarRoot>\r\n  );\r\n};\r\n\r\ninterface MultipleCalendarProps extends Omit<RootMultipleProps, \"children\"> {\r\n  locales: Intl.LocalesArgument;\r\n  numberOfMonths: number;\r\n}\r\n\r\nconst MultipleCalendar = (props: MultipleCalendarProps) => {\r\n  const [local, rest] = splitProps(props, [\"mode\", \"locales\"]);\r\n  const formatWeekdayLong = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(local.locales, {\r\n        weekday: \"long\",\r\n      }),\r\n  );\r\n  const formatWeekdayShort = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(local.locales, {\r\n        weekday: \"short\",\r\n      }),\r\n  );\r\n  const formatMonth = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(local.locales, {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n      }),\r\n  );\r\n  return (\r\n    <CalendarRoot mode=\"multiple\" {...rest}>\r\n      {(calendarProps) => (\r\n        <div class=\"my-4 rounded-base border-2 border-border p-3\">\r\n          <div class=\"flex items-center justify-between\">\r\n            <CalendarNav\r\n              as={Button}\r\n              action=\"prev-month\"\r\n              aria-label=\"Go to previous month\"\r\n              variant=\"neutral-no-shadow\"\r\n              size=\"icon\"\r\n              class=\"size-7\"\r\n            >\r\n              <ChevronLeftIcon class=\"size-5\" />\r\n            </CalendarNav>\r\n            <CalendarLabel class=\"text-sm\">\r\n              {formatMonth().format(calendarProps.month)}\r\n            </CalendarLabel>\r\n            <CalendarNav\r\n              as={Button}\r\n              action=\"next-month\"\r\n              aria-label=\"Go to next month\"\r\n              variant=\"neutral-no-shadow\"\r\n              size=\"icon\"\r\n              class=\"size-7\"\r\n            >\r\n              <ChevronRightIcon class=\"size-5\" />\r\n            </CalendarNav>\r\n          </div>\r\n          <CalendarTable class=\"mt-3\">\r\n            <thead>\r\n              <tr>\r\n                <Index each={calendarProps.weekdays}>\r\n                  {(weekday) => (\r\n                    <CalendarHeadCell\r\n                      abbr={formatWeekdayLong().format(weekday())}\r\n                      class=\"w-8 pb-1 text-xs font-normal opacity-65\"\r\n                    >\r\n                      {formatWeekdayShort().format(weekday())}\r\n                    </CalendarHeadCell>\r\n                  )}\r\n                </Index>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <Index each={calendarProps.weeks}>\r\n                {(week) => (\r\n                  <tr>\r\n                    <Index each={week()}>\r\n                      {(day) => (\r\n                        <CalendarCell class=\"p-0\">\r\n                          <CalendarCellTrigger\r\n                            day={day()}\r\n                            class=\"size-8 rounded-base text-sm transition-colors duration-100 focus-visible:bg-primary/80 disabled:pointer-events-none disabled:opacity-40 data-selected:border-2 data-selected:border-border data-selected:bg-primary! data-selected:text-primary-foreground! data-today:bg-primary/50 md:hover:bg-primary/80\"\r\n                          >\r\n                            {day().getDate()}\r\n                          </CalendarCellTrigger>\r\n                        </CalendarCell>\r\n                      )}\r\n                    </Index>\r\n                  </tr>\r\n                )}\r\n              </Index>\r\n            </tbody>\r\n          </CalendarTable>\r\n        </div>\r\n      )}\r\n    </CalendarRoot>\r\n  );\r\n};\r\n\r\ninterface RangeCalendarProps\r\n  extends Omit<RootRangeProps, \"children\" | \"numberOfMonths\"> {\r\n  locales: Intl.LocalesArgument;\r\n  numberOfMonths: number;\r\n}\r\n\r\nconst RangeCalendar = (props: RangeCalendarProps) => {\r\n  const [local, rest] = splitProps(props, [\r\n    \"mode\",\r\n    \"locales\",\r\n    \"numberOfMonths\",\r\n  ]);\r\n  const formatWeekdayLong = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(props.locales, {\r\n        weekday: \"long\",\r\n      }),\r\n  );\r\n  const formatWeekdayShort = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(props.locales, {\r\n        weekday: \"short\",\r\n      }),\r\n  );\r\n  const formatMonth = createMemo(\r\n    () =>\r\n      new Intl.DateTimeFormat(props.locales, {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n      }),\r\n  );\r\n  return (\r\n    <CalendarRoot mode=\"range\" numberOfMonths={local.numberOfMonths} {...rest}>\r\n      {(calendarProps) => (\r\n        <div class=\"relative my-4 rounded-base border-2 border-border p-3\">\r\n          <div class=\"space-y-4 md:flex md:space-y-0 md:space-x-4\">\r\n            <Index each={calendarProps.months}>\r\n              {(month, index) => (\r\n                <div>\r\n                  <div class=\"flex h-7 items-center justify-between\">\r\n                    <Show when={index === 0} fallback={<div class=\"w-7\" />}>\r\n                      <CalendarNav\r\n                        as={Button}\r\n                        action=\"prev-month\"\r\n                        aria-label=\"Go to previous month\"\r\n                        variant=\"neutral-no-shadow\"\r\n                        size=\"icon\"\r\n                        class=\"size-7\"\r\n                      >\r\n                        <ChevronLeftIcon class=\"size-5\" />\r\n                      </CalendarNav>\r\n                    </Show>\r\n                    <CalendarLabel index={index} class=\"text-sm\">\r\n                      {formatMonth().format(month().month)}\r\n                    </CalendarLabel>\r\n                    <Show\r\n                      when={index === local.numberOfMonths - 1}\r\n                      fallback={<div class=\"w-7\" />}\r\n                    >\r\n                      <CalendarNav\r\n                        as={Button}\r\n                        action=\"next-month\"\r\n                        aria-label=\"Go to next month\"\r\n                        variant=\"neutral-no-shadow\"\r\n                        size=\"icon\"\r\n                        class=\"size-7\"\r\n                      >\r\n                        <ChevronRightIcon class=\"size-5\" />\r\n                      </CalendarNav>\r\n                    </Show>\r\n                  </div>\r\n                  <CalendarTable index={index} class=\"mt-3\">\r\n                    <thead>\r\n                      <tr>\r\n                        <Index each={calendarProps.weekdays}>\r\n                          {(weekday) => (\r\n                            <CalendarHeadCell\r\n                              abbr={formatWeekdayLong().format(weekday())}\r\n                              class=\"w-8 flex-1 pb-1 text-xs font-normal opacity-65\"\r\n                            >\r\n                              {formatWeekdayShort().format(weekday())}\r\n                            </CalendarHeadCell>\r\n                          )}\r\n                        </Index>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      <Index each={month().weeks}>\r\n                        {(week) => (\r\n                          <tr>\r\n                            <Index each={week()}>\r\n                              {(day) => (\r\n                                <CalendarCell class=\"p-0 has-data-in-range:bg-primary/40 has-data-in-range:first:rounded-l-base has-data-in-range:last:rounded-r-base has-data-range-end:rounded-r-base has-data-range-start:rounded-l-base has-[[disabled]]:opacity-40\">\r\n                                  <CalendarCellTrigger\r\n                                    day={day()}\r\n                                    month={month().month}\r\n                                    class=\"inline-flex size-8 items-center justify-center rounded-base text-sm focus-visible:bg-primary/80 disabled:pointer-events-none data-range-end:border-2 data-range-end:border-border data-range-end:bg-primary data-range-start:border-2 data-range-start:border-border data-range-start:bg-primary data-today:bg-primary/50 md:hover:not-data-range-start:not-data-range-end:bg-primary/80\"\r\n                                  >\r\n                                    {day().getDate()}\r\n                                  </CalendarCellTrigger>\r\n                                </CalendarCell>\r\n                              )}\r\n                            </Index>\r\n                          </tr>\r\n                        )}\r\n                      </Index>\r\n                    </tbody>\r\n                  </CalendarTable>\r\n                </div>\r\n              )}\r\n            </Index>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </CalendarRoot>\r\n  );\r\n};\r\n\r\ninterface CalendarSingleProps\r\n  extends Omit<RootSingleProps, \"children\" | \"mode\"> {\r\n  locales?: Intl.LocalesArgument;\r\n  mode: \"single\";\r\n}\r\n\r\ninterface CalendarMultipleProps\r\n  extends Omit<RootMultipleProps, \"children\" | \"mode\"> {\r\n  locales?: Intl.LocalesArgument;\r\n  mode?: \"multiple\";\r\n}\r\n\r\ninterface CalendarRangeProps extends Omit<RootRangeProps, \"children\" | \"mode\"> {\r\n  locales?: Intl.LocalesArgument;\r\n  mode: \"range\";\r\n}\r\n\r\ntype CalendarProps =\r\n  | CalendarSingleProps\r\n  | CalendarMultipleProps\r\n  | CalendarRangeProps;\r\n\r\nconst Calendar = (props: CalendarProps) => {\r\n  const merged = mergeProps(\r\n    {\r\n      locales: \"en\" as Intl.LocalesArgument,\r\n      numberOfMonths: 2,\r\n    },\r\n    props,\r\n  );\r\n\r\n  return (\r\n    <Switch>\r\n      <Match when={merged.mode === \"single\" || merged.mode === undefined}>\r\n        <SingleCalendar {...(merged as SingleCalendarProps)} />\r\n      </Match>\r\n      <Match when={merged.mode === \"multiple\"}>\r\n        <MultipleCalendar {...(merged as MultipleCalendarProps)} />\r\n      </Match>\r\n      <Match when={merged.mode === \"range\"}>\r\n        <RangeCalendar {...(merged as RangeCalendarProps)} />\r\n      </Match>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport {\r\n  Calendar,\r\n  type CalendarProps,\r\n  SingleCalendar,\r\n  type SingleCalendarProps,\r\n  MultipleCalendar,\r\n  type MultipleCalendarProps,\r\n  RangeCalendar,\r\n  type RangeCalendarProps,\r\n  CalendarRoot,\r\n  CalendarNav,\r\n  CalendarLabel,\r\n  CalendarCell,\r\n  CalendarCellTrigger,\r\n  CalendarHeadCell,\r\n  CalendarTable,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}
