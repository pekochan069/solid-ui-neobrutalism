{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge-delta",
  "type": "registry:ui",
  "registryDependencies": ["badge"],
  "files": [
    {
      "path": "src/registry/items/ui/badge-delta.tsx",
      "content": "import type { BadgeProps } from \"~/components/ui/badge\";\r\nimport type { VariantProps } from \"class-variance-authority\";\r\nimport type { Component, JSXElement } from \"solid-js\";\r\n\r\nimport { createEffect, on, splitProps } from \"solid-js\";\r\nimport { cva } from \"class-variance-authority\";\r\nimport {\r\n  ArrowDownIcon,\r\n  ArrowDownRightIcon,\r\n  ArrowRightIcon,\r\n  ArrowUpIcon,\r\n  ArrowUpRightIcon,\r\n} from \"lucide-solid\";\r\n\r\nimport { Badge } from \"~/components/ui/badge\";\r\nimport { cn } from \"~/lib/utils\";\r\n\r\ntype DeltaType =\r\n  | \"increase\"\r\n  | \"moderateIncrease\"\r\n  | \"unchanged\"\r\n  | \"moderateDecrease\"\r\n  | \"decrease\";\r\n\r\nconst badgeDeltaVariants = cva(\"\", {\r\n  variants: {\r\n    variant: {\r\n      success: \"bg-success text-success-foreground hover:bg-success\",\r\n      warning: \"bg-warning text-warning-foreground hover:bg-warning\",\r\n      error: \"bg-error text-error-foreground hover:bg-error\",\r\n    },\r\n  },\r\n});\r\ntype DeltaVariant = NonNullable<\r\n  VariantProps<typeof badgeDeltaVariants>[\"variant\"]\r\n>;\r\n\r\nconst iconMap: {\r\n  [key in DeltaType]: (props: { class?: string }) => JSXElement;\r\n} = {\r\n  increase: (props) => <ArrowUpIcon class={props.class} />,\r\n  moderateIncrease: (props) => <ArrowUpRightIcon class={props.class} />,\r\n  unchanged: (props) => <ArrowRightIcon class={props.class} />,\r\n  moderateDecrease: (props) => <ArrowDownRightIcon class={props.class} />,\r\n  decrease: (props) => <ArrowDownIcon class={props.class} />,\r\n};\r\n\r\nconst variantMap: { [key in DeltaType]: DeltaVariant } = {\r\n  increase: \"success\",\r\n  moderateIncrease: \"success\",\r\n  unchanged: \"warning\",\r\n  moderateDecrease: \"error\",\r\n  decrease: \"error\",\r\n};\r\n\r\ntype BadgeDeltaProps = Omit<BadgeProps, \"variant\"> & {\r\n  deltaType: DeltaType;\r\n};\r\n\r\nconst BadgeDelta: Component<BadgeDeltaProps> = (props) => {\r\n  const [local, others] = splitProps(props, [\"class\", \"children\", \"deltaType\"]);\r\n\r\n  // eslint-disable-next-line solid/reactivity\r\n  let Icon = iconMap[local.deltaType];\r\n  createEffect(\r\n    on(\r\n      () => local.deltaType,\r\n      () => {\r\n        Icon = iconMap[local.deltaType];\r\n      },\r\n    ),\r\n  );\r\n\r\n  return (\r\n    <Badge\r\n      class={cn(\r\n        badgeDeltaVariants({ variant: variantMap[local.deltaType] }),\r\n        local.class,\r\n      )}\r\n      {...others}\r\n    >\r\n      <span class=\"flex gap-1\">\r\n        <Icon class=\"size-4\" />\r\n        {local.children}\r\n      </span>\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport { BadgeDelta };\r\n",
      "type": "registry:ui"
    }
  ]
}
