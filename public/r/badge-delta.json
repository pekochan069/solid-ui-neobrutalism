{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge-delta",
  "type": "registry:ui",
  "registryDependencies": ["badge"],
  "files": [
    {
      "path": "src/registry/items/ui/badge-delta.tsx",
      "content": "import type { BadgeProps } from \"~/components/ui/badge\";\nimport type { VariantProps } from \"class-variance-authority\";\nimport type { Component, JSXElement } from \"solid-js\";\n\nimport { createEffect, on, Show, splitProps } from \"solid-js\";\nimport { cva } from \"class-variance-authority\";\nimport ArrowDownIcon from \"lucide-solid/icons/arrow-down\";\nimport ArrowDownRightIcon from \"lucide-solid/icons/arrow-down-right\";\nimport ArrowRightIcon from \"lucide-solid/icons/arrow-right\";\nimport ArrowUpIcon from \"lucide-solid/icons/arrow-up\";\nimport ArrowUpRightIcon from \"lucide-solid/icons/arrow-up-right\";\n\nimport { Badge } from \"~/components/ui/badge\";\nimport { cn } from \"~/lib/utils\";\n\ntype DeltaType =\n  | \"increase\"\n  | \"moderateIncrease\"\n  | \"unchanged\"\n  | \"moderateDecrease\"\n  | \"decrease\";\n\nconst badgeDeltaVariants = cva(\"\", {\n  variants: {\n    variant: {\n      success: \"bg-success text-success-foreground hover:bg-success\",\n      warning: \"bg-warning text-warning-foreground hover:bg-warning\",\n      error: \"bg-error text-error-foreground hover:bg-error\",\n    },\n  },\n});\ntype DeltaVariant = NonNullable<\n  VariantProps<typeof badgeDeltaVariants>[\"variant\"]\n>;\n\nconst iconMap: {\n  [key in DeltaType]: (props: { class?: string }) => JSXElement;\n} = {\n  increase: (props) => <ArrowUpIcon class={props.class} />,\n  moderateIncrease: (props) => <ArrowUpRightIcon class={props.class} />,\n  unchanged: (props) => <ArrowRightIcon class={props.class} />,\n  moderateDecrease: (props) => <ArrowDownRightIcon class={props.class} />,\n  decrease: (props) => <ArrowDownIcon class={props.class} />,\n};\n\nconst variantMap: { [key in DeltaType]: DeltaVariant } = {\n  increase: \"success\",\n  moderateIncrease: \"success\",\n  unchanged: \"warning\",\n  moderateDecrease: \"error\",\n  decrease: \"error\",\n};\n\ntype BadgeDeltaProps = Omit<BadgeProps, \"variant\"> & {\n  deltaType: DeltaType;\n  iconLocation?: \"left\" | \"right\";\n};\n\nconst BadgeDelta: Component<BadgeDeltaProps> = (props) => {\n  const [local, others] = splitProps(props, [\n    \"class\",\n    \"children\",\n    \"deltaType\",\n    \"iconLocation\",\n  ]);\n\n  // eslint-disable-next-line solid/reactivity\n  let Icon = iconMap[local.deltaType];\n  createEffect(\n    on(\n      () => local.deltaType,\n      () => {\n        Icon = iconMap[local.deltaType];\n      },\n    ),\n  );\n\n  return (\n    <Badge\n      class={cn(\n        badgeDeltaVariants({ variant: variantMap[local.deltaType] }),\n        local.class,\n      )}\n      {...others}\n    >\n      <span class=\"flex gap-1\">\n        <Show\n          when={\n            local.iconLocation === undefined || local.iconLocation === \"left\"\n          }\n        >\n          <Icon class=\"size-4\" />\n        </Show>\n        {local.children}\n        <Show when={local.iconLocation === \"right\"}>\n          <Icon class=\"size-4\" />\n        </Show>\n      </span>\n    </Badge>\n  );\n};\n\nexport { BadgeDelta };\n",
      "type": "registry:ui"
    }
  ]
}
