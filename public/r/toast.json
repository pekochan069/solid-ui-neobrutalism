{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:ui",
  "dependencies": ["@kobalte/core"],
  "files": [
    {
      "path": "src/registry/items/ui/toast.tsx",
      "content": "import type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\r\nimport type { VariantProps } from \"class-variance-authority\";\r\nimport type { JSX, ValidComponent } from \"solid-js\";\r\n\r\nimport { Match, splitProps, Switch } from \"solid-js\";\r\nimport { Portal } from \"solid-js/web\";\r\nimport * as ToastPrimitive from \"@kobalte/core/toast\";\r\nimport { cva } from \"class-variance-authority\";\r\nimport { XIcon } from \"lucide-solid\";\r\n\r\nimport { cn } from \"~/lib/utils\";\r\n\r\nconst toastVariants = cva(\r\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--kb-toast-swipe-end-x)] data-[swipe=end]:animate-out data-[swipe=move]:translate-x-[var(--kb-toast-swipe-move-x)] data-[swipe=move]:transition-none ui-opened:animate-in ui-opened:slide-in-from-top-full ui-opened:sm:slide-in-from-bottom-full ui-closed:animate-out ui-closed:fade-out-80 ui-closed:slide-out-to-right-full\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border-2 border-border bg-background text-foreground\",\r\n        success:\r\n          \"success border-2 border-success-foreground bg-success text-success-foreground\",\r\n        warning:\r\n          \"warning border-2 border-warning-foreground bg-warning text-warning-foreground\",\r\n        error:\r\n          \"error border-2 border-error-foreground bg-error text-error-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  },\r\n);\r\ntype ToastVariant = NonNullable<VariantProps<typeof toastVariants>[\"variant\"]>;\r\n\r\ntype ToastListProps<T extends ValidComponent = \"ol\"> =\r\n  ToastPrimitive.ToastListProps<T> & {\r\n    class?: string | undefined;\r\n  };\r\n\r\nconst Toaster = <T extends ValidComponent = \"ol\">(\r\n  props: PolymorphicProps<T, ToastListProps<T>>,\r\n) => {\r\n  const [local, others] = splitProps(props as ToastListProps, [\"class\"]);\r\n  return (\r\n    <Portal>\r\n      <ToastPrimitive.Region data-slot=\"toast-region\">\r\n        <ToastPrimitive.List\r\n          data-slot=\"toast-list\"\r\n          class={cn(\r\n            \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse gap-2 p-4 sm:top-auto sm:right-0 sm:bottom-0 sm:flex-col md:max-w-[420px]\",\r\n            local.class,\r\n          )}\r\n          {...others}\r\n        />\r\n      </ToastPrimitive.Region>\r\n    </Portal>\r\n  );\r\n};\r\n\r\ntype ToastRootProps<T extends ValidComponent = \"li\"> =\r\n  ToastPrimitive.ToastRootProps<T> &\r\n    VariantProps<typeof toastVariants> & { class?: string | undefined };\r\n\r\nconst Toast = <T extends ValidComponent = \"li\">(\r\n  props: PolymorphicProps<T, ToastRootProps<T>>,\r\n) => {\r\n  const [local, others] = splitProps(props as ToastRootProps, [\r\n    \"class\",\r\n    \"variant\",\r\n  ]);\r\n  return (\r\n    <ToastPrimitive.Root\r\n      data-slot=\"toast\"\r\n      class={cn(toastVariants({ variant: local.variant }), local.class)}\r\n      {...others}\r\n    />\r\n  );\r\n};\r\n\r\ntype ToastCloseButtonProps<T extends ValidComponent = \"button\"> =\r\n  ToastPrimitive.ToastCloseButtonProps<T> & { class?: string | undefined };\r\n\r\nconst ToastClose = <T extends ValidComponent = \"button\">(\r\n  props: PolymorphicProps<T, ToastCloseButtonProps<T>>,\r\n) => {\r\n  const [local, others] = splitProps(props as ToastCloseButtonProps, [\"class\"]);\r\n  return (\r\n    <ToastPrimitive.CloseButton\r\n      data-slot=\"toast-close-button\"\r\n      class={cn(\r\n        \"absolute top-2 right-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity group-hover:opacity-100 group-[.error]:text-error-foreground group-[.success]:text-success-foreground group-[.warning]:text-warning-foreground focus:opacity-100 focus:ring-2 focus:outline-none\",\r\n        local.class,\r\n      )}\r\n      {...others}\r\n    >\r\n      <XIcon class=\"size-4\" />\r\n    </ToastPrimitive.CloseButton>\r\n  );\r\n};\r\n\r\ntype ToastTitleProps<T extends ValidComponent = \"div\"> =\r\n  ToastPrimitive.ToastTitleProps<T> & {\r\n    class?: string | undefined;\r\n  };\r\n\r\nconst ToastTitle = <T extends ValidComponent = \"div\">(\r\n  props: PolymorphicProps<T, ToastTitleProps<T>>,\r\n) => {\r\n  const [local, others] = splitProps(props as ToastTitleProps, [\"class\"]);\r\n  return (\r\n    <ToastPrimitive.Title\r\n      data-slot=\"toast-title\"\r\n      class={cn(\"text-sm font-semibold\", local.class)}\r\n      {...others}\r\n    />\r\n  );\r\n};\r\n\r\ntype ToastDescriptionProps<T extends ValidComponent = \"div\"> =\r\n  ToastPrimitive.ToastDescriptionProps<T> & { class?: string | undefined };\r\n\r\nconst ToastDescription = <T extends ValidComponent = \"div\">(\r\n  props: PolymorphicProps<T, ToastDescriptionProps<T>>,\r\n) => {\r\n  const [local, others] = splitProps(props as ToastDescriptionProps, [\"class\"]);\r\n  return (\r\n    <ToastPrimitive.Description\r\n      data-slot=\"toast-description\"\r\n      class={cn(\"text-sm opacity-90\", local.class)}\r\n      {...others}\r\n    />\r\n  );\r\n};\r\n\r\nfunction showToast(props: {\r\n  title?: JSX.Element;\r\n  description?: JSX.Element;\r\n  variant?: ToastVariant;\r\n  duration?: number;\r\n}) {\r\n  ToastPrimitive.toaster.show((data) => (\r\n    <Toast\r\n      toastId={data.toastId}\r\n      variant={props.variant}\r\n      duration={props.duration}\r\n    >\r\n      <div class=\"grid gap-1\">\r\n        {props.title && <ToastTitle>{props.title}</ToastTitle>}\r\n        {props.description && (\r\n          <ToastDescription>{props.description}</ToastDescription>\r\n        )}\r\n      </div>\r\n      <ToastClose />\r\n    </Toast>\r\n  ));\r\n}\r\n\r\nfunction showToastPromise<T, U>(\r\n  promise: Promise<T> | (() => Promise<T>),\r\n  options: {\r\n    loading?: JSX.Element;\r\n    success?: (data: T) => JSX.Element;\r\n    error?: (error: U) => JSX.Element;\r\n    duration?: number;\r\n  },\r\n) {\r\n  const variant: { [key in ToastPrimitive.ToastPromiseState]: ToastVariant } = {\r\n    pending: \"default\",\r\n    fulfilled: \"success\",\r\n    rejected: \"error\",\r\n  };\r\n  return ToastPrimitive.toaster.promise<T, U>(promise, (props) => (\r\n    <Toast\r\n      toastId={props.toastId}\r\n      variant={variant[props.state]}\r\n      duration={options.duration}\r\n    >\r\n      <Switch>\r\n        <Match when={props.state === \"pending\"}>{options.loading}</Match>\r\n        <Match when={props.state === \"fulfilled\"}>\r\n          {options.success?.(props.data!)}\r\n        </Match>\r\n        <Match when={props.state === \"rejected\"}>\r\n          {options.error?.(props.error!)}\r\n        </Match>\r\n      </Switch>\r\n    </Toast>\r\n  ));\r\n}\r\n\r\nexport {\r\n  Toaster,\r\n  Toast,\r\n  ToastClose,\r\n  ToastTitle,\r\n  ToastDescription,\r\n  showToast,\r\n  showToastPromise,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}
