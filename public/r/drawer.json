{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:ui",
  "dependencies": ["@corvu/drawer"],
  "files": [
    {
      "path": "src/registry/items/ui/drawer.tsx",
      "content": "import type {\n  CloseProps,\n  ContentProps,\n  DescriptionProps,\n  DynamicProps,\n  LabelProps,\n  OverlayProps,\n  PortalProps,\n  RootProps,\n  TriggerProps,\n} from \"@corvu/drawer\";\nimport type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\";\nimport type { Portal } from \"solid-js/web\";\n\nimport { splitProps } from \"solid-js\";\nimport DrawerPrimitive from \"@corvu/drawer\";\n\nimport { cn } from \"~/lib/utils\";\n\n// const Drawer = DrawerPrimitive;\nconst Drawer = (props: RootProps) => {\n  return <DrawerPrimitive data-slot=\"drawer\" {...props} />;\n};\n\nconst DrawerTrigger = <T extends ValidComponent = \"button\">(\n  props: DynamicProps<T, TriggerProps<T>>,\n) => {\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />;\n};\n\nconst DrawerPortal = (props: PortalProps & ComponentProps<typeof Portal>) => {\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />;\n};\n\nconst DrawerClose = <T extends ValidComponent = \"button\">(\n  props: DynamicProps<T, CloseProps<T>>,\n) => {\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />;\n};\n\ntype DrawerOverlayProps<T extends ValidComponent = \"div\"> = OverlayProps<T> & {\n  class?: string;\n};\n\nconst DrawerOverlay = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerOverlayProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DrawerOverlayProps, [\"class\"]);\n  const drawerContext = DrawerPrimitive.useContext();\n  return (\n    <DrawerPrimitive.Overlay\n      data-slot=\"drawer-overlay\"\n      data-transitioning={drawerContext.openPercentage() * 100}\n      class={cn(\n        \"fixed inset-0 z-50 data-[transitioning]:transition-colors data-[transitioning]:duration-300\",\n        props.class,\n      )}\n      style={{\n        \"background-color\": `color-mix(in oklab, var(--overlay) ${100 * drawerContext.openPercentage()}%, transparent)`,\n      }}\n      {...rest}\n    />\n  );\n};\n\ntype DrawerContentProps<T extends ValidComponent = \"div\"> = ContentProps<T> & {\n  class?: string;\n  children?: JSX.Element;\n};\n\nconst DrawerContent = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerContentProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DrawerContentProps, [\n    \"class\",\n    \"children\",\n  ]);\n  return (\n    <DrawerPortal>\n      <DrawerOverlay />\n      <DrawerPrimitive.Content\n        data-slot=\"drawer-content\"\n        class={cn(\n          \"group/drawer-content fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background after:absolute after:inset-x-0 after:top-full after:h-1/2 after:bg-inherit data-[transitioning]:transition-transform data-[transitioning]:duration-300 md:select-none\",\n          props.class,\n        )}\n        {...rest}\n      >\n        <div class=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-current\" />\n        {props.children}\n      </DrawerPrimitive.Content>\n    </DrawerPortal>\n  );\n};\n\nconst DrawerHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"]);\n  return (\n    <div\n      data-slot=\"drawer-header\"\n      class={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", props.class)}\n      {...rest}\n    />\n  );\n};\n\nconst DrawerFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"]);\n  return (\n    <div\n      data-slot=\"drawer-footer\"\n      class={cn(\"mt-auto flex flex-col gap-2 p-4\", props.class)}\n      {...rest}\n    />\n  );\n};\n\ntype DrawerTitleProps<T extends ValidComponent = \"div\"> = LabelProps<T> & {\n  class?: string;\n};\n\nconst DrawerTitle = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerTitleProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DrawerTitleProps, [\"class\"]);\n  return (\n    <DrawerPrimitive.Label\n      data-slot=\"drawer-title\"\n      class={cn(\n        \"text-lg leading-none font-semibold tracking-tight\",\n        props.class,\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype DrawerDescriptionProps<T extends ValidComponent = \"div\"> =\n  DescriptionProps<T> & {\n    class?: string;\n  };\n\nconst DrawerDescription = <T extends ValidComponent = \"div\">(\n  props: DynamicProps<T, DrawerDescriptionProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DrawerDescriptionProps, [\"class\"]);\n  return (\n    <DrawerPrimitive.Description\n      data-slot=\"drawer-description\"\n      class={cn(\"text-sm text-muted-foreground\", props.class)}\n      {...rest}\n    />\n  );\n};\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n};\n",
      "type": "registry:ui"
    }
  ]
}
