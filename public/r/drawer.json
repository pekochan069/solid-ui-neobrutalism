{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "drawer",
  "type": "registry:ui",
  "dependencies": ["@corvu/drawer"],
  "files": [
    {
      "path": "src/registry/items/ui/drawer.tsx",
      "content": "import type {\r\n  CloseProps,\r\n  ContentProps,\r\n  DescriptionProps,\r\n  DynamicProps,\r\n  LabelProps,\r\n  OverlayProps,\r\n  PortalProps,\r\n  RootProps,\r\n  TriggerProps,\r\n} from \"@corvu/drawer\";\r\nimport type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\";\r\nimport type { Portal } from \"solid-js/web\";\r\n\r\nimport { splitProps } from \"solid-js\";\r\nimport DrawerPrimitive from \"@corvu/drawer\";\r\n\r\nimport { cn } from \"~/lib/utils\";\r\n\r\n// const Drawer = DrawerPrimitive;\r\nconst Drawer = (props: RootProps) => {\r\n  return <DrawerPrimitive data-slot=\"drawer\" {...props} />;\r\n};\r\n\r\nconst DrawerTrigger = <T extends ValidComponent = \"button\">(\r\n  props: DynamicProps<T, TriggerProps<T>>,\r\n) => {\r\n  return <DrawerPrimitive.Trigger data-slot=\"drawer-trigger\" {...props} />;\r\n};\r\n\r\nconst DrawerPortal = (props: PortalProps & ComponentProps<typeof Portal>) => {\r\n  return <DrawerPrimitive.Portal data-slot=\"drawer-portal\" {...props} />;\r\n};\r\n\r\nconst DrawerClose = <T extends ValidComponent = \"button\">(\r\n  props: DynamicProps<T, CloseProps<T>>,\r\n) => {\r\n  return <DrawerPrimitive.Close data-slot=\"drawer-close\" {...props} />;\r\n};\r\n\r\ntype DrawerOverlayProps<T extends ValidComponent = \"div\"> = OverlayProps<T> & {\r\n  class?: string;\r\n};\r\n\r\nconst DrawerOverlay = <T extends ValidComponent = \"div\">(\r\n  props: DynamicProps<T, DrawerOverlayProps<T>>,\r\n) => {\r\n  const [, rest] = splitProps(props as DrawerOverlayProps, [\"class\"]);\r\n  const drawerContext = DrawerPrimitive.useContext();\r\n  return (\r\n    <DrawerPrimitive.Overlay\r\n      data-slot=\"drawer-overlay\"\r\n      data-transitioning={drawerContext.openPercentage() * 100}\r\n      class={cn(\r\n        \"fixed inset-0 z-50 data-[transitioning]:transition-colors data-[transitioning]:duration-300\",\r\n        props.class,\r\n      )}\r\n      style={{\r\n        \"background-color\": `color-mix(in oklab, var(--overlay) ${100 * drawerContext.openPercentage()}%, transparent)`,\r\n      }}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\ntype DrawerContentProps<T extends ValidComponent = \"div\"> = ContentProps<T> & {\r\n  class?: string;\r\n  children?: JSX.Element;\r\n};\r\n\r\nconst DrawerContent = <T extends ValidComponent = \"div\">(\r\n  props: DynamicProps<T, DrawerContentProps<T>>,\r\n) => {\r\n  const [, rest] = splitProps(props as DrawerContentProps, [\r\n    \"class\",\r\n    \"children\",\r\n  ]);\r\n  return (\r\n    <DrawerPortal>\r\n      <DrawerOverlay />\r\n      <DrawerPrimitive.Content\r\n        data-slot=\"drawer-content\"\r\n        class={cn(\r\n          \"group/drawer-content fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background after:absolute after:inset-x-0 after:top-full after:h-1/2 after:bg-inherit data-[transitioning]:transition-transform data-[transitioning]:duration-300 md:select-none\",\r\n          props.class,\r\n        )}\r\n        {...rest}\r\n      >\r\n        <div class=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-current\" />\r\n        {props.children}\r\n      </DrawerPrimitive.Content>\r\n    </DrawerPortal>\r\n  );\r\n};\r\n\r\nconst DrawerHeader: Component<ComponentProps<\"div\">> = (props) => {\r\n  const [, rest] = splitProps(props, [\"class\"]);\r\n  return (\r\n    <div\r\n      data-slot=\"drawer-header\"\r\n      class={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", props.class)}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nconst DrawerFooter: Component<ComponentProps<\"div\">> = (props) => {\r\n  const [, rest] = splitProps(props, [\"class\"]);\r\n  return (\r\n    <div\r\n      data-slot=\"drawer-footer\"\r\n      class={cn(\"mt-auto flex flex-col gap-2 p-4\", props.class)}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\ntype DrawerTitleProps<T extends ValidComponent = \"div\"> = LabelProps<T> & {\r\n  class?: string;\r\n};\r\n\r\nconst DrawerTitle = <T extends ValidComponent = \"div\">(\r\n  props: DynamicProps<T, DrawerTitleProps<T>>,\r\n) => {\r\n  const [, rest] = splitProps(props as DrawerTitleProps, [\"class\"]);\r\n  return (\r\n    <DrawerPrimitive.Label\r\n      data-slot=\"drawer-title\"\r\n      class={cn(\r\n        \"text-lg leading-none font-semibold tracking-tight\",\r\n        props.class,\r\n      )}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\ntype DrawerDescriptionProps<T extends ValidComponent = \"div\"> =\r\n  DescriptionProps<T> & {\r\n    class?: string;\r\n  };\r\n\r\nconst DrawerDescription = <T extends ValidComponent = \"div\">(\r\n  props: DynamicProps<T, DrawerDescriptionProps<T>>,\r\n) => {\r\n  const [, rest] = splitProps(props as DrawerDescriptionProps, [\"class\"]);\r\n  return (\r\n    <DrawerPrimitive.Description\r\n      data-slot=\"drawer-description\"\r\n      class={cn(\"text-sm text-muted-foreground\", props.class)}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport {\r\n  Drawer,\r\n  DrawerPortal,\r\n  DrawerOverlay,\r\n  DrawerTrigger,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerFooter,\r\n  DrawerTitle,\r\n  DrawerDescription,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}
