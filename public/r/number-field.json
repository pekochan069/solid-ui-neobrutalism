{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "number-field",
  "type": "registry:ui",
  "dependencies": ["@kobalte/core"],
  "files": [
    {
      "path": "src/registry/items/ui/number-field.tsx",
      "content": "import type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\nimport type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\";\n\nimport { Show, splitProps } from \"solid-js\";\nimport * as NumberFieldPrimitive from \"@kobalte/core/number-field\";\nimport ChevronDownIcon from \"lucide-solid/icons/chevron-down\";\nimport ChevronUpIcon from \"lucide-solid/icons/chevron-up\";\n\nimport { cn } from \"~/lib/utils\";\n\nconst NumberField = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, NumberFieldPrimitive.NumberFieldRootProps<T>>,\n) => {\n  return (\n    <NumberFieldPrimitive.Root data-slot=\"number-field\" gutter={4} {...props} />\n  );\n};\n\nconst NumberFieldGroup: Component<ComponentProps<\"div\">> = (props) => {\n  const [local, others] = splitProps(props, [\"class\"]);\n  return (\n    <div\n      data-slot=\"number-field-group\"\n      class={cn(\n        \"relative rounded-md focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\",\n        local.class,\n      )}\n      {...others}\n    />\n  );\n};\n\ntype NumberFieldLabelProps<T extends ValidComponent = \"label\"> =\n  NumberFieldPrimitive.NumberFieldLabelProps<T> & {\n    class?: string | undefined;\n  };\n\nconst NumberFieldLabel = <T extends ValidComponent = \"label\">(\n  props: PolymorphicProps<T, NumberFieldLabelProps<T>>,\n) => {\n  const [local, others] = splitProps(props as NumberFieldLabelProps, [\"class\"]);\n  return (\n    <NumberFieldPrimitive.Label\n      data-slot=\"number-field-label\"\n      class={cn(\n        \"text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n        local.class,\n      )}\n      {...others}\n    />\n  );\n};\n\ntype NumberFieldInputProps<T extends ValidComponent = \"input\"> =\n  NumberFieldPrimitive.NumberFieldInputProps<T> & {\n    class?: string | undefined;\n  };\n\nconst NumberFieldInput = <T extends ValidComponent = \"input\">(\n  props: PolymorphicProps<T, NumberFieldInputProps<T>>,\n) => {\n  const [local, others] = splitProps(props as NumberFieldInputProps, [\"class\"]);\n  return (\n    <NumberFieldPrimitive.Input\n      data-slot=\"number-field-input\"\n      class={cn(\n        \"flex h-10 w-full rounded-base border-2 border-border bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 ui-invalid:border-error-foreground ui-invalid:text-error-foreground\",\n        local.class,\n      )}\n      {...others}\n    />\n  );\n};\n\ntype NumberFieldIncrementTriggerProps<T extends ValidComponent = \"button\"> =\n  NumberFieldPrimitive.NumberFieldIncrementTriggerProps<T> & {\n    class?: string | undefined;\n    children?: JSX.Element;\n  };\n\nconst NumberFieldIncrementTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, NumberFieldIncrementTriggerProps<T>>,\n) => {\n  const [local, others] = splitProps(\n    props as NumberFieldIncrementTriggerProps,\n    [\"class\", \"children\"],\n  );\n  return (\n    <NumberFieldPrimitive.IncrementTrigger\n      data-slot=\"number-field-increment-trigger\"\n      class={cn(\n        \"absolute top-1 right-1 inline-flex size-4 items-center justify-center\",\n        local.class,\n      )}\n      {...others}\n    >\n      <Show when={local.children} fallback={<ChevronUpIcon class=\"size-4\" />}>\n        {(children) => children()}\n      </Show>\n    </NumberFieldPrimitive.IncrementTrigger>\n  );\n};\n\ntype NumberFieldDecrementTriggerProps<T extends ValidComponent = \"button\"> =\n  NumberFieldPrimitive.NumberFieldDecrementTriggerProps<T> & {\n    class?: string | undefined;\n    children?: JSX.Element;\n  };\n\nconst NumberFieldDecrementTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, NumberFieldDecrementTriggerProps<T>>,\n) => {\n  const [local, others] = splitProps(\n    props as NumberFieldDecrementTriggerProps,\n    [\"class\", \"children\"],\n  );\n  return (\n    <NumberFieldPrimitive.DecrementTrigger\n      data-slot=\"number-field-decrement-trigger\"\n      class={cn(\n        \"absolute right-1 bottom-1 inline-flex size-4 items-center justify-center\",\n        local.class,\n      )}\n      {...others}\n    >\n      <Show when={local.children} fallback={<ChevronDownIcon class=\"size-4\" />}>\n        {(children) => children()}\n      </Show>\n    </NumberFieldPrimitive.DecrementTrigger>\n  );\n};\n\ntype NumberFieldDescriptionProps<T extends ValidComponent = \"div\"> =\n  NumberFieldPrimitive.NumberFieldDescriptionProps<T> & {\n    class?: string | undefined;\n  };\n\nconst NumberFieldDescription = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, NumberFieldDescriptionProps<T>>,\n) => {\n  const [local, others] = splitProps(props as NumberFieldDescriptionProps, [\n    \"class\",\n  ]);\n  return (\n    <NumberFieldPrimitive.Description\n      data-slot=\"number-field-description\"\n      class={cn(\"text-sm text-muted-foreground\", local.class)}\n      {...others}\n    />\n  );\n};\n\ntype NumberFieldErrorMessageProps<T extends ValidComponent = \"div\"> =\n  NumberFieldPrimitive.NumberFieldErrorMessageProps<T> & {\n    class?: string | undefined;\n  };\n\nconst NumberFieldErrorMessage = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, NumberFieldErrorMessageProps<T>>,\n) => {\n  const [local, others] = splitProps(props as NumberFieldErrorMessageProps, [\n    \"class\",\n  ]);\n  return (\n    <NumberFieldPrimitive.ErrorMessage\n      data-slot=\"number-field-error-message\"\n      class={cn(\"text-sm text-error-foreground\", local.class)}\n      {...others}\n    />\n  );\n};\n\nexport {\n  NumberField,\n  NumberFieldGroup,\n  NumberFieldLabel,\n  NumberFieldInput,\n  NumberFieldIncrementTrigger,\n  NumberFieldDecrementTrigger,\n  NumberFieldDescription,\n  NumberFieldErrorMessage,\n};\n",
      "type": "registry:ui",
      "target": "ui/number-field.tsx"
    }
  ]
}
