{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:ui",
  "dependencies": ["embla-carousel-solid"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "src/registry/items/ui/carousel.tsx",
      "content": "import type { ButtonProps } from \"~/components/ui/button\";\r\nimport type { CreateEmblaCarouselType } from \"embla-carousel-solid\";\r\nimport type { Accessor, Component, ComponentProps, VoidProps } from \"solid-js\";\r\n\r\nimport {\r\n  createContext,\r\n  createEffect,\r\n  createMemo,\r\n  createSignal,\r\n  mergeProps,\r\n  splitProps,\r\n  useContext,\r\n} from \"solid-js\";\r\nimport createEmblaCarousel from \"embla-carousel-solid\";\r\nimport { ArrowLeftIcon, ArrowRightIcon } from \"lucide-solid\";\r\n\r\nimport { Button } from \"~/components/ui/button\";\r\nimport { cn } from \"~/lib/utils\";\r\n\r\nexport type CarouselApi = CreateEmblaCarouselType[1];\r\n\r\ntype UseCarouselParameters = Parameters<typeof createEmblaCarousel>;\r\ntype CarouselOptions = NonNullable<UseCarouselParameters[0]>;\r\ntype CarouselPlugin = NonNullable<UseCarouselParameters[1]>;\r\n\r\ntype CarouselProps = {\r\n  opts?: ReturnType<CarouselOptions>;\r\n  plugins?: ReturnType<CarouselPlugin>;\r\n  orientation?: \"horizontal\" | \"vertical\";\r\n  setApi?: (api: CarouselApi) => void;\r\n};\r\n\r\ntype CarouselContextProps = {\r\n  carouselRef: ReturnType<typeof createEmblaCarousel>[0];\r\n  api: ReturnType<typeof createEmblaCarousel>[1];\r\n  scrollPrev: () => void;\r\n  scrollNext: () => void;\r\n  canScrollPrev: Accessor<boolean>;\r\n  canScrollNext: Accessor<boolean>;\r\n} & CarouselProps;\r\n\r\nconst CarouselContext = createContext<Accessor<CarouselContextProps> | null>(\r\n  null,\r\n);\r\n\r\nconst useCarousel = () => {\r\n  const context = useContext(CarouselContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\"useCarousel must be used within a <Carousel />\");\r\n  }\r\n\r\n  return context();\r\n};\r\n\r\nconst Carousel: Component<CarouselProps & ComponentProps<\"div\">> = (\r\n  rawProps,\r\n) => {\r\n  const props = mergeProps<(CarouselProps & ComponentProps<\"div\">)[]>(\r\n    { orientation: \"horizontal\" },\r\n    rawProps,\r\n  );\r\n\r\n  const [local, others] = splitProps(props, [\r\n    \"orientation\",\r\n    \"opts\",\r\n    \"setApi\",\r\n    \"plugins\",\r\n    \"class\",\r\n    \"children\",\r\n  ]);\r\n\r\n  const [carouselRef, api] = createEmblaCarousel(\r\n    () => ({\r\n      ...local.opts,\r\n      axis: local.orientation === \"horizontal\" ? \"x\" : \"y\",\r\n    }),\r\n    () => (local.plugins === undefined ? [] : local.plugins),\r\n  );\r\n  const [canScrollPrev, setCanScrollPrev] = createSignal(false);\r\n  const [canScrollNext, setCanScrollNext] = createSignal(false);\r\n\r\n  const onSelect = (api: NonNullable<ReturnType<CarouselApi>>) => {\r\n    setCanScrollPrev(api.canScrollPrev());\r\n    setCanScrollNext(api.canScrollNext());\r\n  };\r\n\r\n  const scrollPrev = () => {\r\n    api()?.scrollPrev();\r\n  };\r\n\r\n  const scrollNext = () => {\r\n    api()?.scrollNext();\r\n  };\r\n\r\n  const handleKeyDown = (event: KeyboardEvent) => {\r\n    if (event.key === \"ArrowLeft\") {\r\n      event.preventDefault();\r\n      scrollPrev();\r\n    } else if (event.key === \"ArrowRight\") {\r\n      event.preventDefault();\r\n      scrollNext();\r\n    }\r\n  };\r\n\r\n  createEffect(() => {\r\n    if (!api() || !local.setApi) {\r\n      return;\r\n    }\r\n    local.setApi(api);\r\n  });\r\n\r\n  createEffect(() => {\r\n    if (!api()) {\r\n      return;\r\n    }\r\n\r\n    onSelect(api()!);\r\n    api()!.on(\"reInit\", onSelect);\r\n    api()!.on(\"select\", onSelect);\r\n\r\n    return () => {\r\n      api()?.off(\"select\", onSelect);\r\n    };\r\n  });\r\n\r\n  const value = createMemo(\r\n    () =>\r\n      ({\r\n        carouselRef,\r\n        api,\r\n        opts: local.opts,\r\n        orientation:\r\n          local.orientation ||\r\n          (local.opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\r\n        scrollPrev,\r\n        scrollNext,\r\n        canScrollPrev,\r\n        canScrollNext,\r\n      }) satisfies CarouselContextProps,\r\n  );\r\n\r\n  return (\r\n    <CarouselContext.Provider value={value}>\r\n      <div\r\n        data-slot=\"carousel\"\r\n        onKeyDown={handleKeyDown}\r\n        class={cn(\"relative\", local.class)}\r\n        role=\"region\"\r\n        aria-roledescription=\"carousel\"\r\n        {...others}\r\n      >\r\n        {local.children}\r\n      </div>\r\n    </CarouselContext.Provider>\r\n  );\r\n};\r\n\r\nconst CarouselContent: Component<ComponentProps<\"div\">> = (props) => {\r\n  const [local, others] = splitProps(props, [\"class\"]);\r\n  const { carouselRef, orientation } = useCarousel();\r\n\r\n  return (\r\n    <div data-slot=\"carousel-content\" ref={carouselRef} class=\"overflow-hidden\">\r\n      <div\r\n        class={cn(\r\n          \"flex\",\r\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\r\n          local.class,\r\n        )}\r\n        {...others}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CarouselItem: Component<ComponentProps<\"div\">> = (props) => {\r\n  const [local, others] = splitProps(props, [\"class\"]);\r\n  const { orientation } = useCarousel();\r\n\r\n  return (\r\n    <div\r\n      data-slot=\"carousel-item\"\r\n      role=\"group\"\r\n      aria-roledescription=\"slide\"\r\n      class={cn(\r\n        \"min-w-0 shrink-0 grow-0 basis-full\",\r\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\r\n        local.class,\r\n      )}\r\n      {...others}\r\n    />\r\n  );\r\n};\r\n\r\ntype CarouselButtonProps = VoidProps<ButtonProps>;\r\n\r\nconst CarouselPrevious: Component<CarouselButtonProps> = (rawProps) => {\r\n  const props = mergeProps<CarouselButtonProps[]>(\r\n    { variant: \"no-shadow\", size: \"icon\" },\r\n    rawProps,\r\n  );\r\n  const [local, others] = splitProps(props, [\"class\", \"variant\", \"size\"]);\r\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\r\n\r\n  return (\r\n    <Button\r\n      data-slot=\"carousel-previous\"\r\n      variant={local.variant}\r\n      size={local.size}\r\n      class={cn(\r\n        \"absolute size-8 touch-manipulation rounded-full\",\r\n        orientation === \"horizontal\"\r\n          ? \"top-1/2 -left-12 -translate-y-1/2\"\r\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\r\n        local.class,\r\n      )}\r\n      disabled={!canScrollPrev()}\r\n      onClick={scrollPrev}\r\n      {...others}\r\n    >\r\n      <ArrowLeftIcon class=\"size-4\" />\r\n      <span class=\"sr-only\">Previous slide</span>\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst CarouselNext: Component<CarouselButtonProps> = (rawProps) => {\r\n  const props = mergeProps<CarouselButtonProps[]>(\r\n    { variant: \"no-shadow\", size: \"icon\" },\r\n    rawProps,\r\n  );\r\n  const [local, others] = splitProps(props, [\"class\", \"variant\", \"size\"]);\r\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\r\n\r\n  return (\r\n    <Button\r\n      data-slot=\"carousel-next\"\r\n      variant={local.variant}\r\n      size={local.size}\r\n      class={cn(\r\n        \"absolute size-8 touch-manipulation rounded-full\",\r\n        orientation === \"horizontal\"\r\n          ? \"top-1/2 -right-12 -translate-y-1/2\"\r\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\r\n        local.class,\r\n      )}\r\n      disabled={!canScrollNext()}\r\n      onClick={scrollNext}\r\n      {...others}\r\n    >\r\n      <ArrowRightIcon class=\"size-4\" />\r\n      <span class=\"sr-only\">Next slide</span>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport {\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselPrevious,\r\n  CarouselNext,\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}
