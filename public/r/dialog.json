{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:ui",
  "dependencies": ["@kobalte/core"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "src/registry/items/ui/dialog.tsx",
      "content": "import type { PolymorphicProps } from \"@kobalte/core/polymorphic\";\nimport type { Component, ComponentProps, JSX, ValidComponent } from \"solid-js\";\n\nimport { splitProps } from \"solid-js\";\nimport * as DialogPrimitive from \"@kobalte/core/dialog\";\nimport XIcon from \"lucide-solid/icons/x\";\n\nimport { cn } from \"~/lib/utils\";\nimport { buttonVariants } from \"./button\";\n\nconst Dialog = (props: DialogPrimitive.DialogRootProps) => {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />;\n};\n\nconst DialogTrigger = <T extends ValidComponent = \"button\">(\n  props: PolymorphicProps<T, DialogPrimitive.DialogTriggerProps<T>>,\n) => {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />;\n};\n\nconst DialogPortal: Component<DialogPrimitive.DialogPortalProps> = (props) => {\n  const [, rest] = splitProps(props, [\"children\"]);\n  return (\n    <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...rest}>\n      <div class=\"fixed inset-0 z-50 flex items-start justify-center sm:items-center\">\n        {props.children}\n      </div>\n    </DialogPrimitive.Portal>\n  );\n};\n\ntype DialogOverlayProps<T extends ValidComponent = \"div\"> =\n  DialogPrimitive.DialogOverlayProps<T> & { class?: string | undefined };\n\nconst DialogOverlay = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogOverlayProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DialogOverlayProps, [\"class\"]);\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      class={cn(\n        \"fixed inset-0 z-50 bg-overlay ui-expanded:animate-in ui-expanded:fade-in-0 ui-closed:animate-out ui-closed:fade-out-0\",\n        props.class,\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype DialogContentProps<T extends ValidComponent = \"div\"> =\n  DialogPrimitive.DialogContentProps<T> & {\n    class?: string | undefined;\n    children?: JSX.Element;\n  };\n\nconst DialogContent = <T extends ValidComponent = \"div\">(\n  props: PolymorphicProps<T, DialogContentProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DialogContentProps, [\n    \"class\",\n    \"children\",\n  ]);\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        class={cn(\n          \"fixed top-1/2 left-1/2 z-50 grid max-h-screen w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 overflow-y-auto border-2 border-border bg-background p-6 shadow-shadow duration-200 sm:rounded-lg ui-expanded:animate-in ui-expanded:fade-in-0 ui-expanded:zoom-in-95 ui-closed:animate-out ui-closed:fade-out-0 ui-closed:zoom-out-95\",\n          props.class,\n        )}\n        {...rest}\n      >\n        {props.children}\n        <DialogPrimitive.CloseButton\n          data-slot=\"dialog-close-button\"\n          class={cn(\n            buttonVariants({\n              variant: \"neutral\",\n              size: \"icon\",\n            }),\n            \"absolute top-2 right-3 size-8\",\n          )}\n        >\n          <XIcon class=\"size-4\" />\n          <span class=\"sr-only\">Close</span>\n        </DialogPrimitive.CloseButton>\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n};\n\nconst DialogHeader: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"]);\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      class={cn(\n        \"flex flex-col space-y-1.5 text-center sm:text-left\",\n        props.class,\n      )}\n      {...rest}\n    />\n  );\n};\n\nconst DialogFooter: Component<ComponentProps<\"div\">> = (props) => {\n  const [, rest] = splitProps(props, [\"class\"]);\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      class={cn(\n        \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n        props.class,\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype DialogTitleProps<T extends ValidComponent = \"h2\"> =\n  DialogPrimitive.DialogTitleProps<T> & {\n    class?: string | undefined;\n  };\n\nconst DialogTitle = <T extends ValidComponent = \"h2\">(\n  props: PolymorphicProps<T, DialogTitleProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DialogTitleProps, [\"class\"]);\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      class={cn(\n        \"text-lg leading-none font-semibold tracking-tight\",\n        props.class,\n      )}\n      {...rest}\n    />\n  );\n};\n\ntype DialogDescriptionProps<T extends ValidComponent = \"p\"> =\n  DialogPrimitive.DialogDescriptionProps<T> & {\n    class?: string | undefined;\n  };\n\nconst DialogDescription = <T extends ValidComponent = \"p\">(\n  props: PolymorphicProps<T, DialogDescriptionProps<T>>,\n) => {\n  const [, rest] = splitProps(props as DialogDescriptionProps, [\"class\"]);\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      class={cn(\"text-sm text-muted-foreground\", props.class)}\n      {...rest}\n    />\n  );\n};\n\nexport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n};\n",
      "type": "registry:ui",
      "target": "ui/dialog.tsx"
    }
  ]
}
