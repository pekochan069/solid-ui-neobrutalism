import { exec } from "child_process";
import { promises as fs } from "fs";
import path from "path";
import { rimraf } from "rimraf";

// import { getAllBlocks } from "~/lib/blocks";
import registry from "~/registry";
import { baseColorsV4 } from "~/registry/registry-base-colors";
import { colorMapping } from "~/registry/registry-colors";

const REGISTRY_DIR = path.join(process.cwd(), "public/r");

async function buildThemes() {
  await fs.mkdir(path.join(REGISTRY_DIR, "colors"), {
    recursive: true,
  });

  for (const color of baseColorsV4) {
    const inlineColors = `    "light": {\n${Object.entries(colorMapping.light)
      .map(([key, value]) => {
        return `      "${key}": "${value.replace("{{base}}", color.name)}"`;
      })
      .join(",\n")}
    },
    "dark": {\n${Object.entries(colorMapping.dark)
      .map(([key, value]) => {
        return `      "${key}": "${value.replace("{{base}}", color.name)}"`;
      })
      .join(",\n")}
    }`;

    const cssVarsV4 = `    "light": {\n${Object.entries(color.light)
      .map(([key, value]) => {
        return `      "${key}": "${value}"`;
      })
      .join(",\n")} 
    },
    "dark": {\n${Object.entries(color.dark)
      .map(([key, value]) => {
        return `      "${key}": "${value}"`;
      })
      .join(",\n")}
    }`;

    const colorJson = `{
  "inlineColors": {
${inlineColors}
  },
  "cssVars": {
${cssVarsV4}
  },
  "cssVarsV4": {
${cssVarsV4}
  }
}`;

    await fs.writeFile(
      path.join(REGISTRY_DIR, `colors/${color.name}.json`),
      colorJson,
      "utf-8",
    );
  }
}

async function buildRegistryIndex() {
  let index = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import { lazy } from "solid-js";

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",${item.dependencies !== undefined ? `\n    dependencies: ${JSON.stringify(item.dependencies)},` : ""}${item.registryDependencies !== undefined ? `\n    registryDependencies: ${JSON.stringify(item.registryDependencies)},` : ""}${
      item.files?.[0]?.path
        ? `\n    component: lazy(() => import("src/registry/items/${item.type.substring(9)}/${item.name}")),`
        : ""
    }${
      item.files !== undefined && item.files.length > 0
        ? `\n    files: [\n${item.files?.map(
            (file) => `      {
        path: "${file.path}",
        type: "${file.type}",${file.target ? `\n        target: "${file.target}",` : ""}
      },`,
          )}\n   ],`
        : ""
    } 
  },`;
  }

  index += "\n}";

  console.log(`#️⃣  ${Object.keys(registry.items).length} components found`);

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "src/registry/__index__.tsx"));
  await fs.writeFile(
    path.join(process.cwd(), "src/registry/__index__.tsx"),
    index,
  );
}

async function buildRegistryJsonFile() {
  rimraf.sync(path.join(process.cwd(), `registry.json`));
  await fs.writeFile(
    path.join(process.cwd(), `registry.json`),
    JSON.stringify(registry, null, 2),
  );
}

async function buildRegistry() {
  return new Promise((resolve, reject) => {
    const process = exec(
      `bun run shadcn build registry.json --output public/r`,
    );

    process.on("exit", (code) => {
      if (code === 0) {
        resolve(undefined);
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });
}

try {
  console.log("🗂️ Building src/registry/__index__.tsx...");
  await buildRegistryIndex();

  console.log("💅 Building registry.json...");
  await buildRegistryJsonFile();

  console.log("🏗️ Building registry...");
  await buildRegistry();

  console.log("🎨 Building themes...");
  await buildThemes();
} catch (error) {
  console.error(error);
  process.exit(1);
}
